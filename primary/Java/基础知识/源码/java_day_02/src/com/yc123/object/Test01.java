package com.yc123.object;

public class Test01 {
	
	/**
	 *  第三章：
	 *   面向对象:
	 *     将抽象的概念实力化 (我就具体生活中的事物 进行实力化)
	 *     		比如:人  杯子  书 汽车  动物(小猫 小狗....)
	 *     
	 *   为什么要面向对象？
	 *   	面向对象 是程序的高级阶段，在高级阶段之前 面向过程的一种实现方式。
	 *      面向过程的实现方式：
	 *      	一个功能的实现 每一步都需要亲自 设计 亲自实现功能 亲自调试...最后完成。
	 *         eg：XX科技公司需要做一个ERP系统：
	 *         		已面向过程完成这个项目：
	 *         			项目经理，确认需求
	 *                  项目经理，写需求文档
	 *                  项目经理，找客户确认签字
	 *                  项目经理， 开始搭建项目环境
	 *                  项目经理， 开始分模块编码
	 *                  项目经理，完成部分功能后调试
	 *                  项目经理，模块之间整合
	 *                  项目经理，项目上线
	 *                  项目经理，运行维护。
	 *                  项目经理，到客户收款。
	 *                  
	 *       面向对象：
	 *       	XX科技公司需要做一个ERP系统：
	 *       	项目经理：找对象(必须具备编程 行为,写文档能力,沟通能力....)
	 *       		        调用对象 方法实现功能
	 *       		        调用对象 编码 行为
	 *       		        调用对象 。。。。。。
	 *       
	 *          项目完成；
	 *          项目经理：喝茶 检查项目完成情况，收钱；
	 *       
	 *       面向对象：实现过程不需要关心，调用者 只管运行结果；
	 *       
	 *       对象和类的关系？
	 *       	类：是具有相同 行为 和属性的一类集合 的统称；
	 *       
	 *       最顶层的类是：Object
	 *       
	 *       
	 *       需要掌握的知识点：
	 *       	封装:将实现的功能细节 隐藏起来 ，对外提供访问的 方法 接口；具体的表现：程序中的方法
	 *       
	 *       	继承：类与类之间的关联关系，Java中类之间只能单继承，可以级联继承，
	 *       		 被继承的类的非私有属性 和方法，子类可以 访问和使用。
	 *       
	 *       	多态：同一种事物的多种呈现形态；人：学习技能 表现出来的效果作用不一样；
	 *       	                                                            鸟：叫声，.......
	 *       		实现多态的前提：重写 和 重载 
	 *          
	 *          接口：在程序中 只需要 定义方法的作用(功能)，不需要具体的实现代码；不允许出现实现方法，其他类实现接口
	 *          //支付功能
	 *          public void payInfo();
	 *          
	 *          public void runIng(){
	 *          	sysout("这是一个 跑的行为！！！！");
	 *          }
	 *          
	 *          抽象：将具体的实现 和 行为抽象出来，不需要具体功能实现，只需要定义方法的作用，抽象类中 可以有 实现方法；
	 *          	抽象类的使用方式：继承 extends抽象类； 
	 *          
	 *          *******************************************************************
	 *          通过类 获取 指定的实体对象：构造函数
	 *          
	 *          构造函数：通过类 创建指定的对象，在创建对象的时候执行；
	 *          		特点：每次创建对象都执行
	 *          			无返回值，名称和类名相同
	 *          			构造函数 有多个，可以对它进行 重写
	 *          			如果重写 构造函数：默认的构造函数 必须显示的写出来，否则被覆盖；
	 *          
	 *          私有化 属性 private:
	 *          
	 *          this 关键字：代指当前对象，谁创建 谁调用 this就代表谁；
	 *          
	 *          super 关键字：值得父类对象
	 *          
	 *          static：类加载的时候， 跟随类一起加载到内存中，它优先于 对象(this)存在；
	 *          		可以修饰： 类 属性 方法 代码块
	 * 
	 */
	
	public static void main(String[] args) {
		//获的佩奇对象
		Pig peiqi = new Pig();
		
		peiqi.pig_color="粉色";
		peiqi.pig_name="中文名字佩奇";
		
		//peiqi.pigSleep();
		
		//创建小白
//		Human xiaobai = new Human();
//		xiaobai.setName("小白");
//		xiaobai.run();
//		
//		Human lgd = new Human("李狗蛋");
//		lgd.setAge(0);
//		lgd.work();
		
		Human lili = new Human();
		
		
		//调用 学习方法
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}
